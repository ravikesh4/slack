{"version":3,"sources":["firebase.js","actions/index.js","actions/types.js","components/ColorPanel/ColorPanel.js","components/SidePanel/UserPanel.js","components/SidePanel/Channels.js","components/SidePanel/DirectMessages.js","components/SidePanel/Starred.js","components/SidePanel/SidePanel.js","components/Messages/MessagesHeader.js","components/Messages/FileModal.js","components/Messages/ProgressBar.js","components/Messages/MessageForm.js","components/Messages/Message.js","components/Messages/Typing.js","components/Messages/Skeleton.js","components/Messages/Messages.js","components/MetaPanel/MetaPanel.js","components/App.js","serviceWorker.js","components/Auth/Login.js","components/Auth/Register.js","reducers/index.js","Spinner.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","setCurrentChannel","channel","type","payload","currentChannel","setPrivateChannel","isPrivateChannel","ColorPanel","state","modal","primary","secondary","user","props","currentUser","usersRef","database","ref","userColors","removeListener","child","uid","off","addListener","userId","on","snap","unshift","val","setState","handleChangePrimary","color","hex","handleChangeSecondary","handleSaveColors","saveColors","push","update","then","console","log","closeModal","catch","err","error","displayUserColors","colors","length","map","i","Fragment","key","Divider","className","onClick","setColors","style","background","openModal","this","Sidebar","as","Menu","icon","inverted","vertical","visible","width","Button","size","Modal","basic","open","onClose","Header","Content","Segment","Label","content","onChange","Actions","Icon","name","React","Component","connect","primaryColor","secondaryColor","UserPanel","previewImage","croppedImage","blob","uploadedCroppedImage","storageRef","storage","userRef","auth","metadata","contentType","dropdownOptions","text","displayName","disabled","handleSignout","uploadCroppedImage","put","getDownloadURL","downloadURL","changeAvatar","updateProfile","photoURL","avatar","handleChange","event","file","target","files","reader","FileReader","readAsDataURL","addEventListener","result","signOut","Grid","Column","Row","padding","margin","floated","Dropdown","trigger","Image","src","spaced","options","Input","fluid","label","centered","stackable","columns","height","handleCropImage","Channels","activeChannel","channels","channelName","channelDetails","channelsRef","messagesRef","typingRef","notifications","firstLoad","addListeners","loadedChannels","setFirstChannel","addNotificationListener","channelId","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnownTotal","removeListeners","forEach","firstChannel","setActiveChannel","addChannel","newChannel","details","createdBy","handleSubmit","preventDefault","isFormValid","value","changeChannel","remove","clearNotifications","updatedNotifications","getNotificationCount","displayChannels","Item","opacity","active","Form","onSubmit","Field","DirectMessages","users","connectedRef","presenceRef","currentUserUid","loadedUsers","set","onDisconnect","addStatusToUser","connected","updatedUsers","reduce","acc","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","Starred","starredChannels","starredChannel","channelToRemove","filteredChannels","filter","SidePanel","fixed","fontSize","MessagesHeader","numUniqueUsers","handleSearchChange","searchLoading","handleStar","isChannelStarred","clearing","marginBottom","Subheader","loading","placeholder","FileModal","authorized","addFile","sendFile","uploadFile","isAuthorized","mime","lookup","clearFile","filename","includes","ProgressBar","uploadState","percentUploaded","Progress","percent","progress","indicating","MessageForm","uploadTask","message","errors","emojiPicker","handleKeyDown","ctrlKey","keyCode","sendMessage","handleTogglePicker","handleAddEmoji","emoji","oldMessage","newMessage","colonToUnicode","colons","setTimeout","messageInputRef","focus","replace","x","emojiIndex","emojis","unicode","native","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","getMessagesRef","getPath","pathToUpload","filePath","uuidv4","Math","round","bytesTransferred","totalBytes","snapshot","downloadUrl","sendFileMessage","cancel","onSelect","title","onKeyDown","node","labelPosition","some","Group","widths","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","hasOwnProperty","isImage","image","Text","Typing","Skeleton","Messages","privateChannel","privateMessagesRef","messages","messagesLoading","searchTerm","searchResults","typingUsers","listeners","listener","addToListeners","newListener","scrollToBottom","messagesEnd","scrollIntoView","behavior","addMessageListener","addTypingListeners","loadedMessages","countUniqueUsers","countUserPosts","addUserStarsListener","once","data","prevStarred","Object","keys","prevState","starChannel","handleSearchMessages","channelMessages","regex","RegExp","match","uniqueUsers","plural","userPosts","setUserPosts","displayMessages","displayChannelName","displayTypingUsers","display","alignItems","displayMessageSkeleton","Array","_","prevProps","MetaPanel","activeIndex","setActiveIndex","titleProps","newIndex","formatCount","num","displayTopPosters","posts","entries","sort","a","b","List","Description","slice","attached","Accordion","styled","Title","circular","marginLeft","Boolean","window","location","hostname","Login","email","password","displayErrors","signInWithEmailAndPassword","signedInUser","textAlign","verticalAlign","maxWidth","stacked","iconPosition","to","Register","username","passwordConfirmation","isFormEmpty","isPasswordValid","createUserWithEmailAndPassword","createdUser","md5","saveUser","initialUserState","isLoading","initialChannelState","initialColorsState","rootReducer","combineReducers","action","Spinner","Dimmer","Loader","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","clearUser","exact","path","component","App","RootWithAuth","withRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8908dda2.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\"\r\nimport \"firebase/storage\"\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDRNWw_G9mjdyMbfrutN95UzSuH4oq_lAA\",\r\n    authDomain: \"slack-a032e.firebaseapp.com\",\r\n    databaseURL: \"https://slack-a032e.firebaseio.com\",\r\n    projectId: \"slack-a032e\",\r\n    storageBucket: \"slack-a032e.appspot.com\",\r\n    messagingSenderId: \"1027695772276\",\r\n    appId: \"1:1027695772276:web:2f030a1227872e79d84721\",\r\n    measurementId: \"G-68HSBF00JC\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig)\r\n\r\n  export default firebase;","import * as actionTypes from './types'\r\n\r\n// USER ACTIONS \r\nexport const setUser = user => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearUser = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER,\r\n    }\r\n}\r\n\r\n// channels actions \r\nexport const setCurrentChannel = channel => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPrivateChannel = isPrivateChannel => {\r\n    return {\r\n        type: actionTypes.SET_PRIVATE_CHANNEL,\r\n        payload: {\r\n            isPrivateChannel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserPosts = userPosts => {\r\n    return {\r\n        type: actionTypes.SET_USER_POSTS,\r\n        payload: {\r\n            userPosts\r\n        }\r\n    }\r\n}\r\n\r\n// colors action area\r\n\r\nexport const setColors = (primaryColor, secondaryColor) => {\r\n    return {\r\n        type: actionTypes.SET_COLORS,\r\n        payload: {\r\n            primaryColor,\r\n            secondaryColor\r\n        }\r\n    }\r\n}\r\n","// user action type \r\nexport const SET_USER = 'SET_USER';\r\n\r\nexport const CLEAR_USER = \"CLEAR_USER\"\r\n\r\n// channel actions type \r\n\r\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\"\r\n\r\nexport const SET_PRIVATE_CHANNEL = \"SET_PRIVATE_CHANNEL\"\r\n\r\nexport const SET_USER_POSTS = \"SET_USER_POSTS\"\r\n\r\n// color action type \r\n\r\nexport const SET_COLORS = \"SET_COLORS\"\r\n","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setColors } from \"../../actions\";\r\n// prettier-ignore\r\nimport { Sidebar, Menu, Divider, Button, Modal, Icon, Label, Segment } from \"semantic-ui-react\";\r\nimport { SliderPicker } from \"react-color\";\r\n\r\nclass ColorPanel extends React.Component {\r\n  state = {\r\n    modal: false,\r\n    primary: \"\",\r\n    secondary: \"\",\r\n    user: this.props.currentUser,\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    userColors: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.user) {\r\n      this.addListener(this.state.user.uid);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeListener();\r\n  }\r\n\r\n  removeListener = () => {\r\n    this.state.usersRef.child(`${this.state.user.uid}/colors`).off();\r\n  };\r\n\r\n  addListener = userId => {\r\n    let userColors = [];\r\n    this.state.usersRef.child(`${userId}/colors`).on(\"child_added\", snap => {\r\n      userColors.unshift(snap.val());\r\n      this.setState({ userColors });\r\n    });\r\n  };\r\n\r\n  handleChangePrimary = color => this.setState({ primary: color.hex });\r\n\r\n  handleChangeSecondary = color => this.setState({ secondary: color.hex });\r\n\r\n  handleSaveColors = () => {\r\n    if (this.state.primary && this.state.secondary) {\r\n      this.saveColors(this.state.primary, this.state.secondary);\r\n    }\r\n  };\r\n\r\n  saveColors = (primary, secondary) => {\r\n    this.state.usersRef\r\n      .child(`${this.state.user.uid}/colors`)\r\n      .push()\r\n      .update({\r\n        primary,\r\n        secondary\r\n      })\r\n      .then(() => {\r\n        console.log(\"Colors added\");\r\n        this.closeModal();\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  displayUserColors = colors =>\r\n    colors.length > 0 &&\r\n    colors.map((color, i) => (\r\n      <React.Fragment key={i}>\r\n        <Divider />\r\n        <div\r\n          className=\"color__container\"\r\n          onClick={() => this.props.setColors(color.primary, color.secondary)}\r\n        >\r\n          <div className=\"color__square\" style={{ background: color.primary }}>\r\n            <div\r\n              className=\"color__overlay\"\r\n              style={{ background: color.secondary }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    ));\r\n\r\n  openModal = () => this.setState({ modal: true });\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  render() {\r\n    const { modal, primary, secondary, userColors } = this.state;\r\n\r\n    return (\r\n      <Sidebar\r\n        as={Menu}\r\n        icon=\"labeled\"\r\n        inverted\r\n        vertical\r\n        visible\r\n        width=\"very thin\"\r\n      >\r\n        <Divider />\r\n        <Button icon=\"add\" size=\"small\" color=\"blue\" onClick={this.openModal} />\r\n        {this.displayUserColors(userColors)}\r\n\r\n        {/* Color Picker Modal */}\r\n        <Modal basic open={modal} onClose={this.closeModal}>\r\n          <Modal.Header>Choose App Colors</Modal.Header>\r\n          <Modal.Content>\r\n            <Segment inverted>\r\n              <Label content=\"Primary Color\" />\r\n              <SliderPicker\r\n                color={primary}\r\n                onChange={this.handleChangePrimary}\r\n              />\r\n            </Segment>\r\n\r\n            <Segment inverted>\r\n              <Label content=\"Secondary Color\" />\r\n              <SliderPicker\r\n                color={secondary}\r\n                onChange={this.handleChangeSecondary}\r\n              />\r\n            </Segment>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color=\"green\" inverted onClick={this.handleSaveColors}>\r\n              <Icon name=\"checkmark\" /> Save Colors\r\n            </Button>\r\n            <Button color=\"red\" inverted onClick={this.closeModal}>\r\n              <Icon name=\"remove\" /> Cancel\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Sidebar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setColors }\r\n)(ColorPanel);\r\n","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\n// import AvatarEditor from \"react-avatar-editor\";\r\n// prettier-ignore\r\nimport { Grid, Header, Icon, Dropdown, Image, Modal, Input, Button } from \"semantic-ui-react\";\r\n\r\nclass UserPanel extends React.Component {\r\n  state = {\r\n    user: this.props.currentUser,\r\n    modal: false,\r\n    previewImage: \"\",\r\n    croppedImage: \"\",\r\n    blob: null,\r\n    uploadedCroppedImage: \"\",\r\n    storageRef: firebase.storage().ref(),\r\n    userRef: firebase.auth().currentUser,\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    metadata: {\r\n      contentType: \"image/jpeg\"\r\n    }\r\n  };\r\n\r\n  openModal = () => this.setState({ modal: true });\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  dropdownOptions = () => [\r\n    {\r\n      key: \"user\",\r\n      text: (\r\n        <span>\r\n          Signed in as <strong>{this.state.user.displayName}</strong>\r\n        </span>\r\n      ),\r\n      disabled: true\r\n    },\r\n    {\r\n      key: \"avatar\",\r\n      text: <span onClick={this.openModal}>Change Avatar</span>\r\n    },\r\n    {\r\n      key: \"signout\",\r\n      text: <span onClick={this.handleSignout}>Sign Out</span>\r\n    }\r\n  ];\r\n\r\n  uploadCroppedImage = () => {\r\n    const { storageRef, userRef, blob, metadata } = this.state;\r\n\r\n    storageRef\r\n      // .child(`avatars/user/${userRef.uid}`)\r\n      .child(`avatars/user-${userRef.uid}`)\r\n      .put(blob, metadata)\r\n      .then(snap => {\r\n        snap.ref.getDownloadURL().then(downloadURL => {\r\n          this.setState({ uploadedCroppedImage: downloadURL }, () =>\r\n            this.changeAvatar()\r\n          );\r\n        });\r\n      });\r\n  };\r\n\r\n  changeAvatar = () => {\r\n    this.state.userRef\r\n      .updateProfile({\r\n        photoURL: this.state.uploadedCroppedImage\r\n      })\r\n      .then(() => {\r\n        console.log(\"PhotoURL updated\");\r\n        this.closeModal();\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n\r\n    this.state.usersRef\r\n      .child(this.state.user.uid)\r\n      .update({ avatar: this.state.uploadedCroppedImage })\r\n      .then(() => {\r\n        console.log(\"User avatar updated\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  handleChange = event => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n      reader.addEventListener(\"load\", () => {\r\n        this.setState({ previewImage: reader.result,  });\r\n      });\r\n    }\r\n  };\r\n\r\n//   handleCropImage = () => {\r\n//     if (this.avatarEditor) {\r\n//       this.avatarEditor.getImageScaledToCanvas().toBlob(blob => {\r\n//         let imageUrl = URL.createObjectURL(blob);\r\n//         this.setState({\r\n//           croppedImage: imageUrl,\r\n//           blob\r\n//         });\r\n//       });\r\n//     }\r\n//   };\r\n\r\n  handleSignout = () => {\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => console.log(\"signed out!\"));\r\n  };\r\n\r\n  render() {\r\n    const { user, modal, previewImage, croppedImage } = this.state;\r\n    const { primaryColor } = this.props;\r\n\r\n    return (\r\n      <Grid style={{ background: primaryColor }}>\r\n        <Grid.Column>\r\n          <Grid.Row style={{ padding: \"1.2em\", margin: 0 }}>\r\n            {/* App Header */}\r\n            <Header inverted floated=\"left\" as=\"h2\">\r\n              <Icon name=\"code\" />\r\n              <Header.Content>DevChat</Header.Content>\r\n            </Header>\r\n\r\n            {/* User Dropdown  */}\r\n            <Header style={{ padding: \"0.25em\" }} as=\"h4\" inverted>\r\n              <Dropdown\r\n                trigger={\r\n                  <span>\r\n                    <Image src={user.photoURL} spaced=\"right\" avatar />\r\n                    {user.displayName}\r\n                  </span>\r\n                }\r\n                options={this.dropdownOptions()}\r\n              />\r\n            </Header>\r\n          </Grid.Row>\r\n\r\n          {/* Change User Avatar Modal   */}\r\n          <Modal basic open={modal} onClose={this.closeModal}>\r\n            <Modal.Header>Change Avatar</Modal.Header>\r\n            <Modal.Content>\r\n              <Input\r\n                onChange={this.handleChange}\r\n                fluid\r\n                type=\"file\"\r\n                label=\"New Avatar\"\r\n                name=\"previewImage\"\r\n              />\r\n              <Grid centered stackable columns={2}>\r\n                <Grid.Row centered>\r\n                  {/* <Grid.Column className=\"ui center aligned grid\">\r\n                    {previewImage && (\r\n                      <AvatarEditor\r\n                        ref={node => (this.avatarEditor = node)}\r\n                        image={previewImage}\r\n                        width={120}\r\n                        height={120}\r\n                        border={50}\r\n                        scale={1.2}\r\n                      />\r\n                    )}\r\n                  </Grid.Column> */}\r\n                  <Grid.Column>\r\n                    {previewImage && (\r\n                      <Image\r\n                        style={{ margin: \"3.5em auto\" }}\r\n                        width={100}\r\n                        height={100}\r\n                        src={previewImage}\r\n                      />\r\n                    )}\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              {previewImage && (\r\n                <Button\r\n                  color=\"green\"\r\n                  inverted\r\n                  onClick={this.uploadCroppedImage}\r\n                >\r\n                  <Icon name=\"save\" /> Change Avatar\r\n                </Button>\r\n              )}\r\n              <Button color=\"green\" inverted onClick={this.handleCropImage}>\r\n                <Icon name=\"image\" /> Preview\r\n              </Button>\r\n              <Button color=\"red\" inverted onClick={this.closeModal}>\r\n                <Icon name=\"remove\" /> Cancel\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserPanel;\r\n","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\n// prettier-ignore\r\nimport { Menu, Icon, Modal, Form, Input, Button, Label } from \"semantic-ui-react\";\r\n\r\nclass Channels extends React.Component {\r\n  state = {\r\n    activeChannel: \"\",\r\n    user: this.props.currentUser,\r\n    channel: null,\r\n    channels: [],\r\n    channelName: \"\",\r\n    channelDetails: \"\",\r\n    channelsRef: firebase.database().ref(\"channels\"),\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    typingRef: firebase.database().ref(\"typing\"),\r\n    notifications: [],\r\n    modal: false,\r\n    firstLoad: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.addListeners();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeListeners();\r\n  }\r\n\r\n  addListeners = () => {\r\n    let loadedChannels = [];\r\n    this.state.channelsRef.on(\"child_added\", snap => {\r\n      loadedChannels.push(snap.val());\r\n      this.setState({ channels: loadedChannels }, () => this.setFirstChannel());\r\n      this.addNotificationListener(snap.key);\r\n    });\r\n  };\r\n\r\n  addNotificationListener = channelId => {\r\n    this.state.messagesRef.child(channelId).on(\"value\", snap => {\r\n      if (this.state.channel) {\r\n        this.handleNotifications(\r\n          channelId,\r\n          this.state.channel.id,\r\n          this.state.notifications,\r\n          snap\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  handleNotifications = (channelId, currentChannelId, notifications, snap) => {\r\n    let lastTotal = 0;\r\n\r\n    let index = notifications.findIndex(\r\n      notification => notification.id === channelId\r\n    );\r\n\r\n    if (index !== -1) {\r\n      if (channelId !== currentChannelId) {\r\n        lastTotal = notifications[index].total;\r\n\r\n        if (snap.numChildren() - lastTotal > 0) {\r\n          notifications[index].count = snap.numChildren() - lastTotal;\r\n        }\r\n      }\r\n      notifications[index].lastKnownTotal = snap.numChildren();\r\n    } else {\r\n      notifications.push({\r\n        id: channelId,\r\n        total: snap.numChildren(),\r\n        lastKnownTotal: snap.numChildren(),\r\n        count: 0\r\n      });\r\n    }\r\n\r\n    this.setState({ notifications });\r\n  };\r\n\r\n  removeListeners = () => {\r\n    this.state.channelsRef.off();\r\n    this.state.channels.forEach(channel => {\r\n      this.state.messagesRef.child(channel.id).off();\r\n    });\r\n  };\r\n\r\n  setFirstChannel = () => {\r\n    const firstChannel = this.state.channels[0];\r\n    if (this.state.firstLoad && this.state.channels.length > 0) {\r\n      this.props.setCurrentChannel(firstChannel);\r\n      this.setActiveChannel(firstChannel);\r\n      this.setState({ channel: firstChannel });\r\n    }\r\n    this.setState({ firstLoad: false });\r\n  };\r\n\r\n  addChannel = () => {\r\n    const { channelsRef, channelName, channelDetails, user } = this.state;\r\n\r\n    const key = channelsRef.push().key;\r\n\r\n    const newChannel = {\r\n      id: key,\r\n      name: channelName,\r\n      details: channelDetails,\r\n      createdBy: {\r\n        name: user.displayName,\r\n        avatar: user.photoURL\r\n      }\r\n    };\r\n\r\n    channelsRef\r\n      .child(key)\r\n      .update(newChannel)\r\n      .then(() => {\r\n        this.setState({ channelName: \"\", channelDetails: \"\" });\r\n        this.closeModal();\r\n        console.log(\"channel added\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.isFormValid(this.state)) {\r\n      this.addChannel();\r\n    }\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  changeChannel = channel => {\r\n    this.setActiveChannel(channel);\r\n    this.state.typingRef\r\n      .child(this.state.channel.id)\r\n      .child(this.state.user.uid)\r\n      .remove();\r\n    this.clearNotifications();\r\n    this.props.setCurrentChannel(channel);\r\n    this.props.setPrivateChannel(false);\r\n    this.setState({ channel });\r\n  };\r\n\r\n  clearNotifications = () => {\r\n    let index = this.state.notifications.findIndex(\r\n      notification => notification.id === this.state.channel.id\r\n    );\r\n\r\n    if (index !== -1) {\r\n      let updatedNotifications = [...this.state.notifications];\r\n      updatedNotifications[index].total = this.state.notifications[\r\n        index\r\n      ].lastKnownTotal;\r\n      updatedNotifications[index].count = 0;\r\n      this.setState({ notifications: updatedNotifications });\r\n    }\r\n  };\r\n\r\n  setActiveChannel = channel => {\r\n    this.setState({ activeChannel: channel.id });\r\n  };\r\n\r\n  getNotificationCount = channel => {\r\n    let count = 0;\r\n\r\n    this.state.notifications.forEach(notification => {\r\n      if (notification.id === channel.id) {\r\n        count = notification.count;\r\n      }\r\n    });\r\n\r\n    if (count > 0) return count;\r\n  };\r\n\r\n  displayChannels = channels =>\r\n    channels.length > 0 &&\r\n    channels.map(channel => (\r\n      <Menu.Item\r\n        key={channel.id}\r\n        onClick={() => this.changeChannel(channel)}\r\n        name={channel.name}\r\n        style={{ opacity: 0.7 }}\r\n        active={channel.id === this.state.activeChannel}\r\n      >\r\n        {this.getNotificationCount(channel) && (\r\n          <Label color=\"red\">{this.getNotificationCount(channel)}</Label>\r\n        )}\r\n        # {channel.name}\r\n      </Menu.Item>\r\n    ));\r\n\r\n  isFormValid = ({ channelName, channelDetails }) =>\r\n    channelName && channelDetails;\r\n\r\n  openModal = () => this.setState({ modal: true });\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  render() {\r\n    const { channels, modal } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Menu.Menu className=\"menu\">\r\n          <Menu.Item>\r\n            <span>\r\n              <Icon name=\"exchange\" /> CHANNELS\r\n            </span>{\" \"}\r\n            ({channels.length}) <Icon name=\"add\" onClick={this.openModal} />\r\n          </Menu.Item>\r\n          {this.displayChannels(channels)}\r\n        </Menu.Menu>\r\n\r\n        {/* Add Channel Modal */}\r\n        <Modal basic open={modal} onClose={this.closeModal}>\r\n          <Modal.Header>Add a Channel</Modal.Header>\r\n          <Modal.Content>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Field>\r\n                <Input\r\n                  fluid\r\n                  label=\"Name of Channel\"\r\n                  name=\"channelName\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <Input\r\n                  fluid\r\n                  label=\"About the Channel\"\r\n                  name=\"channelDetails\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n          </Modal.Content>\r\n\r\n          <Modal.Actions>\r\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\r\n              <Icon name=\"checkmark\" /> Add\r\n            </Button>\r\n            <Button color=\"red\" inverted onClick={this.closeModal}>\r\n              <Icon name=\"remove\" /> Cancel\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setCurrentChannel, setPrivateChannel }\r\n)(Channels);\r\n","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nclass DirectMessages extends React.Component {\r\n  state = {\r\n    activeChannel: \"\",\r\n    user: this.props.currentUser,\r\n    users: [],\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    connectedRef: firebase.database().ref(\".info/connected\"),\r\n    presenceRef: firebase.database().ref(\"presence\")\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.user) {\r\n      this.addListeners(this.state.user.uid);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeListeners();\r\n  }\r\n\r\n  removeListeners = () => {\r\n    this.state.usersRef.off();\r\n    this.state.presenceRef.off();\r\n    this.state.connectedRef.off();\r\n  };\r\n\r\n  addListeners = currentUserUid => {\r\n    let loadedUsers = [];\r\n    this.state.usersRef.on(\"child_added\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        let user = snap.val();\r\n        user[\"uid\"] = snap.key;\r\n        user[\"status\"] = \"offline\";\r\n        loadedUsers.push(user);\r\n        this.setState({ users: loadedUsers });\r\n      }\r\n    });\r\n\r\n    this.state.connectedRef.on(\"value\", snap => {\r\n      if (snap.val() === true) {\r\n        const ref = this.state.presenceRef.child(currentUserUid);\r\n        ref.set(true);\r\n        ref.onDisconnect().remove(err => {\r\n          if (err !== null) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    this.state.presenceRef.on(\"child_added\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        this.addStatusToUser(snap.key);\r\n      }\r\n    });\r\n\r\n    this.state.presenceRef.on(\"child_removed\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        this.addStatusToUser(snap.key, false);\r\n      }\r\n    });\r\n  };\r\n\r\n  addStatusToUser = (userId, connected = true) => {\r\n    const updatedUsers = this.state.users.reduce((acc, user) => {\r\n      if (user.uid === userId) {\r\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\r\n      }\r\n      return acc.concat(user);\r\n    }, []);\r\n    this.setState({ users: updatedUsers });\r\n  };\r\n\r\n  isUserOnline = user => user.status === \"online\";\r\n\r\n  changeChannel = user => {\r\n    const channelId = this.getChannelId(user.uid);\r\n    const channelData = {\r\n      id: channelId,\r\n      name: user.name\r\n    };\r\n    this.props.setCurrentChannel(channelData);\r\n    this.props.setPrivateChannel(true);\r\n    this.setActiveChannel(user.uid);\r\n  };\r\n\r\n  getChannelId = userId => {\r\n    const currentUserId = this.state.user.uid;\r\n    return userId < currentUserId\r\n      ? `${userId}/${currentUserId}`\r\n      : `${currentUserId}/${userId}`;\r\n  };\r\n\r\n  setActiveChannel = userId => {\r\n    this.setState({ activeChannel: userId });\r\n  };\r\n\r\n  render() {\r\n    const { users, activeChannel } = this.state;\r\n\r\n    return (\r\n      <Menu.Menu className=\"menu\">\r\n        <Menu.Item>\r\n          <span>\r\n            <Icon name=\"mail\" /> DIRECT MESSAGES\r\n          </span>{\" \"}\r\n          ({users.length})\r\n        </Menu.Item>\r\n        {users.map(user => (\r\n          <Menu.Item\r\n            key={user.uid}\r\n            active={user.uid === activeChannel}\r\n            onClick={() => this.changeChannel(user)}\r\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\r\n          >\r\n            <Icon\r\n              name=\"circle\"\r\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\r\n            />\r\n            @ {user.name}\r\n          </Menu.Item>\r\n        ))}\r\n      </Menu.Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setCurrentChannel, setPrivateChannel }\r\n)(DirectMessages);\r\n","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nclass Starred extends React.Component {\r\n  state = {\r\n    user: this.props.currentUser,\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    activeChannel: \"\",\r\n    starredChannels: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.user) {\r\n      this.addListeners(this.state.user.uid);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeListener();\r\n  }\r\n\r\n  removeListener = () => {\r\n    this.state.usersRef.child(`${this.state.user.uid}/starred`).off();\r\n  };\r\n\r\n  addListeners = userId => {\r\n    this.state.usersRef\r\n      .child(userId)\r\n      .child(\"starred\")\r\n      .on(\"child_added\", snap => {\r\n        const starredChannel = { id: snap.key, ...snap.val() };\r\n        this.setState({\r\n          starredChannels: [...this.state.starredChannels, starredChannel]\r\n        });\r\n      });\r\n\r\n    this.state.usersRef\r\n      .child(userId)\r\n      .child(\"starred\")\r\n      .on(\"child_removed\", snap => {\r\n        const channelToRemove = { id: snap.key, ...snap.val() };\r\n        const filteredChannels = this.state.starredChannels.filter(channel => {\r\n          return channel.id !== channelToRemove.id;\r\n        });\r\n        this.setState({ starredChannels: filteredChannels });\r\n      });\r\n  };\r\n\r\n  setActiveChannel = channel => {\r\n    this.setState({ activeChannel: channel.id });\r\n  };\r\n\r\n  changeChannel = channel => {\r\n    this.setActiveChannel(channel);\r\n    this.props.setCurrentChannel(channel);\r\n    this.props.setPrivateChannel(false);\r\n  };\r\n\r\n  displayChannels = starredChannels =>\r\n    starredChannels.length > 0 &&\r\n    starredChannels.map(channel => (\r\n      <Menu.Item\r\n        key={channel.id}\r\n        onClick={() => this.changeChannel(channel)}\r\n        name={channel.name}\r\n        style={{ opacity: 0.7 }}\r\n        active={channel.id === this.state.activeChannel}\r\n      >\r\n        # {channel.name}\r\n      </Menu.Item>\r\n    ));\r\n\r\n  render() {\r\n    const { starredChannels } = this.state;\r\n\r\n    return (\r\n      <Menu.Menu className=\"menu\">\r\n        <Menu.Item>\r\n          <span>\r\n            <Icon name=\"star\" /> STARRED\r\n          </span>{\" \"}\r\n          ({starredChannels.length})\r\n        </Menu.Item>\r\n        {this.displayChannels(starredChannels)}\r\n      </Menu.Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setCurrentChannel, setPrivateChannel }\r\n)(Starred);\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport UserPanel from './UserPanel';\r\nimport Channels from './Channels';\r\nimport DirectMessages from './DirectMessages';\r\nimport Starred from './Starred';\r\n\r\nclass SidePanel extends Component {\r\n    render() {\r\n\r\n        const { currentUser,primaryColor } = this.props;\r\n\r\n        return (\r\n            <Menu size=\"large\" inverted fixed=\"left\" vertical style={{ background: primaryColor, fontSize: '1.2rem'}}>\r\n                <UserPanel primaryColor={primaryColor} currentUser={currentUser} />\r\n                <Starred currentUser={currentUser} />\r\n                <Channels currentUser={currentUser} />\r\n                <DirectMessages currentUser={currentUser} />\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SidePanel;","import React, { Component } from 'react'\r\nimport { Segment, Header, Icon, Input } from 'semantic-ui-react';\r\n\r\nclass MessagesHeader extends Component {\r\n    render() {\r\n\r\n        const { channelName, numUniqueUsers, handleSearchChange, searchLoading, isPrivateChannel, handleStar, isChannelStarred } = this.props;\r\n\r\n        return (\r\n            <Segment clearing>\r\n                {/* Message Title  */}\r\n                <Header fluid=\"true\" as=\"h2\"\r\n                    floated=\"left\" style={{ marginBottom: 0 }} >\r\n                    <span>\r\n                        {channelName}\r\n                        {!isPrivateChannel && (\r\n                        <Icon \r\n                        onClick={handleStar} \r\n                        name={isChannelStarred ? 'star' : 'star outline'} color={isChannelStarred\r\n                         ? 'yellow' : 'black'} />\r\n                        )}\r\n                    </span>\r\n                    <Header.Subheader>{numUniqueUsers}</Header.Subheader>\r\n                </Header>\r\n\r\n                {/* channel search icon  */}\r\n                <Header floated=\"right\">\r\n                    <Input\r\n                        loading={searchLoading}\r\n                        onChange={handleSearchChange}\r\n                        size=\"mini\"\r\n                        icon=\"search\"\r\n                        name=\"searchTerm\"\r\n                        placeholder=\"Search Message\"\r\n                    />\r\n                </Header>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagesHeader;","import React, { Component } from 'react'\r\nimport mime from 'mime-types'\r\nimport { Modal, Input, Button, Icon } from 'semantic-ui-react';\r\n\r\nclass FileModal extends Component {\r\n\r\n    state = {\r\n        file: null,\r\n        authorized: ['image/jpeg', 'image/png']\r\n    }\r\n\r\n    addFile = event => {\r\n        const file = event.target.files[0];\r\n        // console.log(file);\r\n        if(file) {\r\n            this.setState({ file });\r\n        }\r\n    }\r\n\r\n    sendFile = () => {\r\n        const { file } = this.state\r\n        const { uploadFile, closeModal } = this.props\r\n\r\n        if(file !== null) {\r\n            if(this.isAuthorized(file.name)){\r\n                const metadate = { contentType: mime.lookup(file.name)};\r\n                uploadFile(file, metadate);\r\n                closeModal();\r\n\r\n                this.clearFile();\r\n            }\r\n        }\r\n    }\r\n\r\n    isAuthorized = filename => this.state.authorized.includes(mime.lookup(filename));\r\n\r\n    clearFile = () => this.setState({ file: null})\r\n\r\n    render() {\r\n\r\n        const { modal, closeModal } = this.props;\r\n\r\n        return (\r\n            <Modal basic open={modal} onClose={closeModal}>\r\n                <Modal.Header>Select an Image File</Modal.Header>\r\n                <Modal.Content>\r\n                    <Input fluid label=\"File types: jpg, png\"\r\n                    onChange={this.addFile}\r\n                        name=\"file\"\r\n                        type=\"file\" />\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                        onClick={this.sendFile}\r\n                        color=\"green\"\r\n                        inverted\r\n                    >\r\n                        <Icon name=\"checkmark\" />Send\r\n                    </Button>\r\n                    <Button\r\n                        color=\"red\"\r\n                        inverted\r\n                        onClick={closeModal}\r\n                    >\r\n                        <Icon name=\"remove\" />Cancel\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileModal;","import React from 'react'\r\nimport { Progress } from 'semantic-ui-react';\r\n\r\nconst ProgressBar = ({ uploadState, percentUploaded }) => (\r\n    uploadState && (\r\n        <Progress\r\n            className=\"progress__bar\"\r\n            percent={percentUploaded}\r\n            progress\r\n            indicating\r\n            size=\"medium\"\r\n            inverted\r\n        />\r\n    )\r\n);\r\n\r\nexport default ProgressBar;\r\n","import React from 'react'\r\nimport uuidv4 from 'uuid/dist/v4'\r\nimport firebase from \"../../firebase\";\r\nimport { Segment, Button, Input } from \"semantic-ui-react\";\r\nimport { Picker, emojiIndex } from \"emoji-mart\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n\r\nimport FileModal from \"./FileModal\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nclass MessageForm extends React.Component {\r\n  state = {\r\n    storageRef: firebase.storage().ref(),\r\n    typingRef: firebase.database().ref(\"typing\"),\r\n    uploadTask: null,\r\n    uploadState: \"\",\r\n    percentUploaded: 0,\r\n    message: \"\",\r\n    channel: this.props.currentChannel,\r\n    user: this.props.currentUser,\r\n    loading: false,\r\n    errors: [],\r\n    modal: false,\r\n    emojiPicker: false\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.uploadTask !== null) {\r\n      this.state.uploadTask.cancel();\r\n      this.setState({ uploadTask: null });\r\n    }\r\n  }\r\n\r\n  openModal = () => this.setState({ modal: true });\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleKeyDown = event => {\r\n    if (event.ctrlKey && event.keyCode === 13) {\r\n      this.sendMessage();\r\n    }\r\n\r\n    const { message, typingRef, channel, user } = this.state;\r\n\r\n    if (message) {\r\n      typingRef\r\n        .child(channel.id)\r\n        .child(user.uid)\r\n        .set(user.displayName);\r\n    } else {\r\n      typingRef\r\n        .child(channel.id)\r\n        .child(user.uid)\r\n        .remove();\r\n    }\r\n  };\r\n\r\n  handleTogglePicker = () => {\r\n    this.setState({ emojiPicker: !this.state.emojiPicker });\r\n  };\r\n\r\n  handleAddEmoji = emoji => {\r\n    const oldMessage = this.state.message;\r\n    const newMessage = this.colonToUnicode(` ${oldMessage} ${emoji.colons} `);\r\n    this.setState({ message: newMessage, emojiPicker: false });\r\n    setTimeout(() => this.messageInputRef.focus(), 0);\r\n  };\r\n\r\n  colonToUnicode = message => {\r\n    return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n      x = x.replace(/:/g, \"\");\r\n      let emoji = emojiIndex.emojis[x];\r\n      if (typeof emoji !== \"undefined\") {\r\n        let unicode = emoji.native;\r\n        if (typeof unicode !== \"undefined\") {\r\n          return unicode;\r\n        }\r\n      }\r\n      x = \":\" + x + \":\";\r\n      return x;\r\n    });\r\n  };\r\n\r\n  createMessage = (fileUrl = null) => {\r\n    const message = {\r\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n      user: {\r\n        id: this.state.user.uid,\r\n        name: this.state.user.displayName,\r\n        avatar: this.state.user.photoURL\r\n      }\r\n    };\r\n    if (fileUrl !== null) {\r\n      message[\"image\"] = fileUrl;\r\n    } else {\r\n      message[\"content\"] = this.state.message;\r\n    }\r\n    return message;\r\n  };\r\n\r\n  sendMessage = () => {\r\n    const { getMessagesRef } = this.props;\r\n    const { message, channel, user, typingRef } = this.state;\r\n\r\n    if (message) {\r\n      this.setState({ loading: true });\r\n      getMessagesRef()\r\n        .child(channel.id)\r\n        .push()\r\n        .set(this.createMessage())\r\n        .then(() => {\r\n          this.setState({ loading: false, message: \"\", errors: [] });\r\n          typingRef\r\n            .child(channel.id)\r\n            .child(user.uid)\r\n            .remove();\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          this.setState({\r\n            loading: false,\r\n            errors: this.state.errors.concat(err)\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({\r\n        errors: this.state.errors.concat({ message: \"Add a message\" })\r\n      });\r\n    }\r\n  };\r\n\r\n  getPath = () => {\r\n    if (this.props.isPrivateChannel) {\r\n      return `chat/private-${this.state.channel.id}`;\r\n      // return `chat/private/${this.state.channel.id}`;\r\n    } else {\r\n      return \"chat/public\";\r\n    }\r\n  };\r\n\r\n  uploadFile = (file, metadata) => {\r\n    const pathToUpload = this.state.channel.id;\r\n    const ref = this.props.getMessagesRef();\r\n    const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\r\n\r\n    this.setState(\r\n      {\r\n        uploadState: \"uploading\",\r\n        uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\r\n      },\r\n      () => {\r\n        this.state.uploadTask.on(\r\n          \"state_changed\",\r\n          snap => {\r\n            const percentUploaded = Math.round(\r\n              (snap.bytesTransferred / snap.totalBytes) * 100\r\n            );\r\n            this.setState({ percentUploaded });\r\n          },\r\n          err => {\r\n            console.error(err);\r\n            this.setState({\r\n              errors: this.state.errors.concat(err),\r\n              uploadState: \"error\",\r\n              uploadTask: null\r\n            });\r\n          },\r\n          () => {\r\n            this.state.uploadTask.snapshot.ref\r\n              .getDownloadURL()\r\n              .then(downloadUrl => {\r\n                this.sendFileMessage(downloadUrl, ref, pathToUpload);\r\n              })\r\n              .catch(err => {\r\n                console.error(err);\r\n                this.setState({\r\n                  errors: this.state.errors.concat(err),\r\n                  uploadState: \"error\",\r\n                  uploadTask: null\r\n                });\r\n              });\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  sendFileMessage = (fileUrl, ref, pathToUpload) => {\r\n    ref\r\n      .child(pathToUpload)\r\n      .push()\r\n      .set(this.createMessage(fileUrl))\r\n      .then(() => {\r\n        this.setState({ uploadState: \"done\" });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          errors: this.state.errors.concat(err)\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    // prettier-ignore\r\n    const { errors, message, loading, modal, uploadState, percentUploaded, emojiPicker } = this.state;\r\n\r\n    return (\r\n      <Segment className=\"message__form\">\r\n        {emojiPicker && (\r\n          <Picker\r\n            set=\"apple\"\r\n            onSelect={this.handleAddEmoji}\r\n            className=\"emojipicker\"\r\n            title=\"Pick your emoji\"\r\n            emoji=\"point_up\"\r\n          />\r\n        )}\r\n        <Input\r\n          fluid\r\n          name=\"message\"\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n          value={message}\r\n          ref={node => (this.messageInputRef = node)}\r\n          style={{ marginBottom: \"0.7em\" }}\r\n          label={\r\n            <Button\r\n              icon={emojiPicker ? \"close\" : \"add\"}\r\n              content={emojiPicker ? \"Close\" : null}\r\n              onClick={this.handleTogglePicker}\r\n            />\r\n          }\r\n          labelPosition=\"left\"\r\n          className={\r\n            errors.some(error => error.message.includes(\"message\"))\r\n              ? \"error\"\r\n              : \"\"\r\n          }\r\n          placeholder=\"Write your message\"\r\n        />\r\n        <Button.Group icon widths=\"2\">\r\n          <Button\r\n            onClick={this.sendMessage}\r\n            disabled={loading}\r\n            color=\"orange\"\r\n            content=\"Add Reply\"\r\n            labelPosition=\"left\"\r\n            icon=\"edit\"\r\n          />\r\n          <Button\r\n            color=\"teal\"\r\n            disabled={uploadState === \"uploading\"}\r\n            onClick={this.openModal}\r\n            content=\"Upload Media\"\r\n            labelPosition=\"right\"\r\n            icon=\"cloud upload\"\r\n          />\r\n        </Button.Group>\r\n        <FileModal\r\n          modal={modal}\r\n          closeModal={this.closeModal}\r\n          uploadFile={this.uploadFile}\r\n        />\r\n        <ProgressBar\r\n          uploadState={uploadState}\r\n          percentUploaded={percentUploaded}\r\n        />\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Comment, Image } from \"semantic-ui-react\";\r\n\r\nconst isOwnMessage = (message, user) => {\r\n  return message.user.id === user.uid ? \"message__self\" : \"\";\r\n};\r\n\r\nconst isImage = (message) => {\r\n  return message.hasOwnProperty('image') && !message.hasOwnProperty('content');\r\n}\r\n\r\nconst timeFromNow = timestamp => moment(timestamp).fromNow();\r\n\r\nconst Message = ({ message, user }) => (\r\n  <Comment className={isOwnMessage(message, user)}>\r\n    <Comment.Avatar src={message.user.avatar} />\r\n    <Comment.Content >\r\n      <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\r\n      <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\r\n\r\n      {isImage(message) ?\r\n        <Image src={message.image} className=\"message__image\" />\r\n        : <Comment.Text>{message.content}</Comment.Text>\r\n      }\r\n    </Comment.Content>\r\n  </Comment>\r\n);\r\n\r\nexport default Message;","import React from 'react';\n\nconst Typing = () => (\n  <div className=\"typing\">\n    <div className=\"typing__dot\"></div>\n    <div className=\"typing__dot\"></div>\n    <div className=\"typing__dot\"></div>\n  </div>\n)\n\nexport default Typing;","import React from \"react\";\n\nconst Skeleton = () => (\n  <div className=\"skeleton\">\n    <div className=\"skeleton__avatar\" />\n    <div className=\"skeleton__author\" />\n    <div className=\"skeleton__details\" />\n  </div>\n);\n\nexport default Skeleton;\n","import React from \"react\";\r\nimport { Segment, Comment } from \"semantic-ui-react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setUserPosts } from \"../../actions\";\r\nimport firebase from \"../../firebase\";\r\n\r\nimport MessagesHeader from \"./MessagesHeader\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport Message from \"./Message\";\r\nimport Typing from \"./Typing\";\r\nimport Skeleton from \"./Skeleton\";\r\n\r\nclass Messages extends React.Component {\r\n  state = {\r\n    privateChannel: this.props.isPrivateChannel,\r\n    privateMessagesRef: firebase.database().ref(\"privateMessages\"),\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    messages: [],\r\n    messagesLoading: true,\r\n    channel: this.props.currentChannel,\r\n    isChannelStarred: false,\r\n    user: this.props.currentUser,\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    numUniqueUsers: \"\",\r\n    searchTerm: \"\",\r\n    searchLoading: false,\r\n    searchResults: [],\r\n    typingRef: firebase.database().ref(\"typing\"),\r\n    typingUsers: [],\r\n    connectedRef: firebase.database().ref(\".info/connected\"),\r\n    listeners: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { channel, user, listeners } = this.state;\r\n\r\n    if (channel && user) {\r\n      this.removeListeners(listeners);\r\n      this.addListeners(channel.id);\r\n      this.addUserStarsListener(channel.id, user.uid);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeListeners(this.state.listeners);\r\n    this.state.connectedRef.off();\r\n  }\r\n\r\n  removeListeners = listeners => {\r\n    listeners.forEach(listener => {\r\n      listener.ref.child(listener.id).off(listener.event);\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.messagesEnd) {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  addToListeners = (id, ref, event) => {\r\n    const index = this.state.listeners.findIndex(listener => {\r\n      return (\r\n        listener.id === id && listener.ref === ref && listener.event === event\r\n      );\r\n    });\r\n\r\n    if (index === -1) {\r\n      const newListener = { id, ref, event };\r\n      this.setState({ listeners: this.state.listeners.concat(newListener) });\r\n    }\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  addListeners = channelId => {\r\n    this.addMessageListener(channelId);\r\n    this.addTypingListeners(channelId);\r\n  };\r\n\r\n  addTypingListeners = channelId => {\r\n    let typingUsers = [];\r\n    this.state.typingRef.child(channelId).on(\"child_added\", snap => {\r\n      if (snap.key !== this.state.user.uid) {\r\n        typingUsers = typingUsers.concat({\r\n          id: snap.key,\r\n          name: snap.val()\r\n        });\r\n        this.setState({ typingUsers });\r\n      }\r\n    });\r\n    this.addToListeners(channelId, this.state.typingRef, \"child_added\");\r\n\r\n    this.state.typingRef.child(channelId).on(\"child_removed\", snap => {\r\n      const index = typingUsers.findIndex(user => user.id === snap.key);\r\n      if (index !== -1) {\r\n        typingUsers = typingUsers.filter(user => user.id !== snap.key);\r\n        this.setState({ typingUsers });\r\n      }\r\n    });\r\n    this.addToListeners(channelId, this.state.typingRef, \"child_removed\");\r\n\r\n    this.state.connectedRef.on(\"value\", snap => {\r\n      if (snap.val() === true) {\r\n        this.state.typingRef\r\n          .child(channelId)\r\n          .child(this.state.user.uid)\r\n          .onDisconnect()\r\n          .remove(err => {\r\n            if (err !== null) {\r\n              console.error(err);\r\n            }\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  addMessageListener = channelId => {\r\n    let loadedMessages = [];\r\n    const ref = this.getMessagesRef();\r\n    ref.child(channelId).on(\"child_added\", snap => {\r\n      loadedMessages.push(snap.val());\r\n      this.setState({\r\n        messages: loadedMessages,\r\n        messagesLoading: false\r\n      });\r\n      this.countUniqueUsers(loadedMessages);\r\n      this.countUserPosts(loadedMessages);\r\n    });\r\n    this.addToListeners(channelId, ref, \"child_added\");\r\n  };\r\n\r\n  addUserStarsListener = (channelId, userId) => {\r\n    this.state.usersRef\r\n      .child(userId)\r\n      .child(\"starred\")\r\n      .once(\"value\")\r\n      .then(data => {\r\n        if (data.val() !== null) {\r\n          const channelIds = Object.keys(data.val());\r\n          const prevStarred = channelIds.includes(channelId);\r\n          this.setState({ isChannelStarred: prevStarred });\r\n        }\r\n      });\r\n  };\r\n\r\n  getMessagesRef = () => {\r\n    const { messagesRef, privateMessagesRef, privateChannel } = this.state;\r\n    return privateChannel ? privateMessagesRef : messagesRef;\r\n  };\r\n\r\n  handleStar = () => {\r\n    this.setState(\r\n      prevState => ({\r\n        isChannelStarred: !prevState.isChannelStarred\r\n      }),\r\n      () => this.starChannel()\r\n    );\r\n  };\r\n\r\n  starChannel = () => {\r\n    if (this.state.isChannelStarred) {\r\n      this.state.usersRef.child(`${this.state.user.uid}/starred`).update({\r\n        [this.state.channel.id]: {\r\n          name: this.state.channel.name,\r\n          details: this.state.channel.details,\r\n          createdBy: {\r\n            name: this.state.channel.createdBy.name,\r\n            avatar: this.state.channel.createdBy.avatar\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      this.state.usersRef\r\n        .child(`${this.state.user.uid}/starred`)\r\n        .child(this.state.channel.id)\r\n        .remove(err => {\r\n          if (err !== null) {\r\n            console.error(err);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  handleSearchChange = event => {\r\n    this.setState(\r\n      {\r\n        searchTerm: event.target.value,\r\n        searchLoading: true\r\n      },\r\n      () => this.handleSearchMessages()\r\n    );\r\n  };\r\n\r\n  handleSearchMessages = () => {\r\n    const channelMessages = [...this.state.messages];\r\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\r\n    const searchResults = channelMessages.reduce((acc, message) => {\r\n      if (\r\n        (message.content && message.content.match(regex)) ||\r\n        message.user.name.match(regex)\r\n      ) {\r\n        acc.push(message);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    this.setState({ searchResults });\r\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\r\n  };\r\n\r\n  countUniqueUsers = messages => {\r\n    const uniqueUsers = messages.reduce((acc, message) => {\r\n      if (!acc.includes(message.user.name)) {\r\n        acc.push(message.user.name);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\r\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\r\n    this.setState({ numUniqueUsers });\r\n  };\r\n\r\n  countUserPosts = messages => {\r\n    let userPosts = messages.reduce((acc, message) => {\r\n      if (message.user.name in acc) {\r\n        acc[message.user.name].count += 1;\r\n      } else {\r\n        acc[message.user.name] = {\r\n          avatar: message.user.avatar,\r\n          count: 1\r\n        };\r\n      }\r\n      return acc;\r\n    }, {});\r\n    this.props.setUserPosts(userPosts);\r\n  };\r\n\r\n  displayMessages = messages =>\r\n    messages.length > 0 &&\r\n    messages.map(message => (\r\n      <Message\r\n        key={message.timestamp}\r\n        message={message}\r\n        user={this.state.user}\r\n      />\r\n    ));\r\n\r\n  displayChannelName = channel => {\r\n    return channel\r\n      ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}`\r\n      : \"\";\r\n  };\r\n\r\n  displayTypingUsers = users =>\r\n    users.length > 0 &&\r\n    users.map(user => (\r\n      <div\r\n        style={{ display: \"flex\", alignItems: \"center\", marginBottom: \"0.2em\" }}\r\n        key={user.id}\r\n      >\r\n        <span className=\"user__typing\">{user.name} is typing</span> <Typing />\r\n      </div>\r\n    ));\r\n\r\n  displayMessageSkeleton = loading =>\r\n    loading ? (\r\n      <React.Fragment>\r\n        {[...Array(10)].map((_, i) => (\r\n          <Skeleton key={i} />\r\n        ))}\r\n      </React.Fragment>\r\n    ) : null;\r\n\r\n  render() {\r\n    // prettier-ignore\r\n    const { messagesRef, messages, channel, user, numUniqueUsers, searchTerm, searchResults, searchLoading, privateChannel, isChannelStarred, typingUsers, messagesLoading } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MessagesHeader\r\n          channelName={this.displayChannelName(channel)}\r\n          numUniqueUsers={numUniqueUsers}\r\n          handleSearchChange={this.handleSearchChange}\r\n          searchLoading={searchLoading}\r\n          isPrivateChannel={privateChannel}\r\n          handleStar={this.handleStar}\r\n          isChannelStarred={isChannelStarred}\r\n        />\r\n\r\n        <Segment>\r\n          <Comment.Group className=\"messages\">\r\n            {this.displayMessageSkeleton(messagesLoading)}\r\n            {searchTerm\r\n              ? this.displayMessages(searchResults)\r\n              : this.displayMessages(messages)}\r\n            {this.displayTypingUsers(typingUsers)}\r\n            <div ref={node => (this.messagesEnd = node)} />\r\n          </Comment.Group>\r\n        </Segment>\r\n\r\n        <MessageForm\r\n          messagesRef={messagesRef}\r\n          currentChannel={channel}\r\n          currentUser={user}\r\n          isPrivateChannel={privateChannel}\r\n          getMessagesRef={this.getMessagesRef}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setUserPosts }\r\n)(Messages);\r\n","import React, { Component } from 'react'\r\nimport { Segment, Header, Accordion, Icon, Image, List } from 'semantic-ui-react';\r\n\r\n\r\nclass MetaPanel extends Component {\r\n\r\n    state = {\r\n        channel: this.props.currentChannel,\r\n        privateChannel: this.props.isPrivateChannel,\r\n        activeIndex: 0\r\n    }\r\n\r\n    setActiveIndex = (event, titleProps) => {\r\n        const { index } = titleProps;\r\n        const { activeIndex } = this.state;\r\n        const newIndex = activeIndex === index ? -1 : index;\r\n        this.setState({ activeIndex: newIndex });\r\n    }\r\n\r\n    formatCount = num => (num > 1 || num === 0 ? `${num} posts` : `${num} post`);\r\n\r\n    displayTopPosters = posts => (\r\n        Object.entries(posts)\r\n            .sort((a, b) => b[1] - a[1])\r\n            .map(([key, val], i) => (\r\n                <List.Item key={i}>\r\n                    <Image avatar src={val.avatar} />\r\n                    <List.Content>\r\n                        <List.Header as=\"a\">{key}</List.Header>\r\n                        {/* <List.Description>{val.count} posts</List.Description> */}\r\n                        <List.Description>{this.formatCount(val.count)}</List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n                ))\r\n                .slice(0, 5)\r\n    )\r\n\r\n    render() {\r\n\r\n        const { activeIndex, privateChannel, channel } = this.state;\r\n        const { userPosts } = this.props;\r\n\r\n        if (privateChannel) return null;\r\n\r\n        return (\r\n            <Segment loading={!channel}>\r\n                <Header as=\"h3\" attached=\"top\">\r\n                    About a #{channel && channel.name}\r\n                </Header>\r\n                <Accordion styled attached=\"true\">\r\n                    <Accordion.Title\r\n                        active={activeIndex === 0}\r\n                        index={0}\r\n                        onClick={this.setActiveIndex}\r\n                    >\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"info\" />\r\n                            Channel Details\r\n                        </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 0}>\r\n                        {channel && channel.details}\r\n                    </Accordion.Content>\r\n\r\n                    <Accordion.Title\r\n                        active={activeIndex === 1}\r\n                        index={1}\r\n                        onClick={this.setActiveIndex}\r\n                    >\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"user circle\" />\r\n                            Top Poster\r\n                        </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 1}>\r\n                        <List>\r\n                            {userPosts && this.displayTopPosters(userPosts)}\r\n                        </List>\r\n                    </Accordion.Content>\r\n\r\n                    <Accordion.Title\r\n                        active={activeIndex === 2}\r\n                        index={2}\r\n                        onClick={this.setActiveIndex}\r\n                    >\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"pencil alternate\" />\r\n                            Created By\r\n                        </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 2}>\r\n                        <Header as=\"h3\">\r\n                            <Image circular src={channel && channel.createdBy.avatar} />\r\n                            {channel && channel.createdBy.name}\r\n                        </Header>\r\n                    </Accordion.Content>\r\n                </Accordion>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MetaPanel;","import React from 'react';\nimport './App.css';\n\nimport { connect } from 'react-redux'\n\nimport { Grid } from 'semantic-ui-react';\nimport ColorPanel from './ColorPanel/ColorPanel';\nimport SidePanel from './SidePanel/SidePanel';\nimport Messages from './Messages/Messages';\nimport MetaPanel from './MetaPanel/MetaPanel';\n\n\n\nconst App = ({ currentUser, currentChannel, isPrivateChannel, userPosts, primaryColor, secondaryColor }) => (\n  <Grid columns=\"equal\" className=\"app\" style={{ background: secondaryColor }}>\n    <ColorPanel \n      key={currentUser && currentUser.name}\n      currentUser={currentUser}\n     />\n    <SidePanel\n      key={currentUser && currentUser.uid}\n      currentUser={currentUser}\n      primaryColor={primaryColor}\n      />\n    <Grid.Column style={{ marginLeft: 320, marginBottom: '100px' }}>\n      <Messages\n        key={currentChannel && currentChannel.id}\n        currentChannel={currentChannel}\n        currentUser={currentUser}\n        isPrivateChannel={isPrivateChannel}\n      />\n    </Grid.Column>\n    <Grid.Column width={4}>\n\n      <MetaPanel\n        key={currentChannel && currentChannel.name}\n        userPosts={userPosts}\n        currentChannel={currentChannel}\n        isPrivateChannel={isPrivateChannel} />\n    </Grid.Column>\n  </Grid>\n);\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  currentChannel: state.channel.currentChannel,\n  isPrivateChannel: state.channel.isPrivateChannel,\n  userPosts: state.channel.userPosts,\n  primaryColor: state.colors.primaryColor,\n  secondaryColor: state.colors.secondaryColor\n})\n\nexport default connect(mapStateToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react'\r\nimport { Grid, Header, Icon, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: '',\r\n        loading: false,\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n\r\n    displayErrors = errors => errors.map((error, i) => <p key={i}>{error.message}</p>)\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        if (this.isFormValid(this.state)) {\r\n            this.setState({ errors: [], loading: true });\r\n            firebase\r\n            .auth()\r\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .then(signedInUser => {\r\n                // console.log(signedInUser);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                this.setState({\r\n                    errors: this.state.errors.concat(err),\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    isFormValid = ({ email, password}) => email && password;\r\n\r\n\r\n    render() {\r\n\r\n        const { email, password, errors, loading } = this.state;\r\n\r\n        return (\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n                <Grid.Column style={{ maxWidth: 450 }}>\r\n                    <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\r\n                        <Icon name=\"code branch\" color=\"violet\" />\r\n                        Login to dev chat\r\n                    </Header>\r\n                    <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                        <Segment stacked>\r\n                            <Form.Input fluid name=\"email\" icon=\"mail\" iconPosition=\"left\" placeholder=\"Email Address\"\r\n                                onChange={this.handleChange} type=\"email\" value={email}\r\n                                // className={errors.some(error => error.message.toLowerCase().includes('email')) ? 'error' : ''}\r\n                                />\r\n                            <Form.Input fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" placeholder=\"Password\"\r\n                                onChange={this.handleChange} type=\"password\" value={password} />\r\n                            \r\n                            <Button disabled={loading} className={loading ? 'loading' : ''} color=\"violet\" fluid size=\"large\">Submit</Button>\r\n                        </Segment>\r\n                    </Form>\r\n                    {errors.length > 0 && (\r\n                        <Message error>\r\n                            <h3>Error</h3>\r\n                            {this.displayErrors(errors)}\r\n                        </Message>\r\n                    )}\r\n                    <Message>Don't have an account? <Link to=\"/register\">Register</Link> </Message>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react'\r\nimport { Grid, Header, Icon, Form, Segment, Button, Message } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\nimport md5 from 'md5';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirmation: '',\r\n        errors: '',\r\n        loading: false,\r\n        usersRef: firebase.database().ref('users')\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    isFormValid = () => {\r\n\r\n        let errors = [];\r\n        let error;\r\n\r\n        if (this.isFormEmpty(this.state)) {\r\n            error = { message: 'Fill all fields' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else if (!this.isPasswordValid(this.state)) {\r\n            error = { message: 'Password is invalid' }\r\n            this.setState({ errors: errors.concat(error) })\r\n            return false;\r\n        } else {\r\n            // form valid \r\n            return true;\r\n        }\r\n    }\r\n\r\n    displayErrors = errors => errors.map((error, i) => <p key={i}>{error.message}</p>)\r\n\r\n    isFormEmpty = ({ username, email, password, passwordConfirmation }) => {\r\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\r\n    }\r\n\r\n    isPasswordValid = ({ password, passwordConfirmation }) => {\r\n        if (password.length < 6 || passwordConfirmation.length < 6) {\r\n            return false;\r\n        } else if (password !== passwordConfirmation) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        if (this.isFormValid()) {\r\n\r\n            this.setState({ errors: [], loading: true });\r\n\r\n            firebase.auth().createUserWithEmailAndPassword(\r\n                this.state.email, this.state.password\r\n            ).then(createdUser => {\r\n                // console.log(createdUser);\r\n                createdUser.user.updateProfile({\r\n                    displayName: this.state.username,\r\n                    photoURL: `http://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\r\n                })\r\n                .then(() => {\r\n                    // this.setState({ loading: false });\r\n                    this.saveUser(createdUser).then(() => {\r\n                        // console.log('User Saved');\r\n                    })\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                    this.setState({ errors: this.state.errors.concat(err), loading: false});\r\n                })\r\n                // this.setState({ loading: false })\r\n            }).catch(err => {\r\n                console.error(err);\r\n                this.setState({ errors: this.state.errors.concat(err), loading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    saveUser = createdUser => {\r\n        return this.state.usersRef.child(createdUser.user.uid).set({\r\n            name: createdUser.user.displayName,\r\n            avatar: createdUser.user.photoURL\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { username, email, password, passwordConfirmation, errors, loading } = this.state;\r\n\r\n        return (\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n                <Grid.Column style={{ maxWidth: 450 }}>\r\n                    <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\r\n                        <Icon name=\"puzzle piece\" color=\"orange\" />\r\n                        Register for dev chat\r\n                    </Header>\r\n                    <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                        <Segment stacked>\r\n                            <Form.Input fluid name=\"username\" icon=\"user\" iconPosition=\"left\" placeholder=\"Username\"\r\n                                onChange={this.handleChange} type=\"text\"\r\n                                value={username}\r\n                            />\r\n                            <Form.Input fluid name=\"email\" icon=\"mail\" iconPosition=\"left\" placeholder=\"Email Address\"\r\n                                onChange={this.handleChange} type=\"email\" value={email}\r\n                                // className={errors.some(error => error.message.toLowerCase().includes('email')) ? 'error' : ''}\r\n                                />\r\n                            <Form.Input fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" placeholder=\"Password\"\r\n                                onChange={this.handleChange} type=\"password\" value={password} />\r\n                            <Form.Input fluid name=\"passwordConfirmation\" icon=\"repeat\" iconPosition=\"left\" placeholder=\"Password Confirmation\"\r\n                                onChange={this.handleChange} type=\"password\" value={passwordConfirmation} />\r\n\r\n                            <Button disabled={loading} className={loading ? 'loading' : ''} color=\"orange\" fluid size=\"large\">Submit</Button>\r\n                        </Segment>\r\n                    </Form>\r\n                    {errors.length > 0 && (\r\n                        <Message error>\r\n                            <h3>Error</h3>\r\n                            {this.displayErrors(errors)}\r\n                        </Message>\r\n                    )}\r\n                    <Message>Already a User? <Link to=\"/login\">Login</Link> </Message>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;","import { combineReducers } from 'redux'\r\n\r\nimport * as actionTypes from '../actions/types'\r\n\r\nconst initialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n}\r\n\r\nconst user_reducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            };\r\n        case actionTypes.CLEAR_USER:\r\n            return {\r\n                currentUser: {\r\n                    ...state,\r\n                    isLoading: false\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialChannelState = {\r\n    currentChannel: null,\r\n    isPrivateChannel: false,\r\n    userPosts: null\r\n}\r\n\r\nconst channel_reducer = (state = initialChannelState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_CHANNEL:\r\n            return {\r\n                ...state,\r\n                currentChannel: action.payload.currentChannel\r\n            }\r\n        case actionTypes.SET_PRIVATE_CHANNEL:\r\n            return {\r\n                ...state,\r\n                isPrivateChannel: action.payload.isPrivateChannel\r\n            }\r\n        case actionTypes.SET_USER_POSTS:\r\n            return {\r\n                ...state,\r\n                userPosts: action.payload.userPosts\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst initialColorsState = {\r\n    primaryColor: '#4c3c4c',\r\n    secondaryColor: '#eee'\r\n}\r\n\r\nconst colors_reducer = (state = initialColorsState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_COLORS:\r\n            return {\r\n                primaryColor: action.payload.primaryColor,\r\n                secondaryColor: action.payload.secondaryColor,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    user: user_reducer,\r\n    channel: channel_reducer,\r\n    colors: colors_reducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react'\r\nimport { Loader, Dimmer } from 'semantic-ui-react';\r\n\r\nconst Spinner = () => (\r\n    <Dimmer active>\r\n        <Loader size=\"huge\" content={\"Preparing Chat...\"} />\r\n    </Dimmer>\r\n)\r\n\r\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport 'semantic-ui-css/semantic.min.css'\nimport firebase from 'firebase'\nimport { Component } from 'react';\nimport { createStore } from 'redux'\nimport { Provider, connect } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers';\n\nimport { setUser, clearUser } from './actions'\nimport Spinner from './Spinner';\n\nconst store = createStore(rootReducer, composeWithDevTools())\n\nclass Root extends Component {\n\n  componentDidMount() {\n    // console.log(this.props.isLoading);\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n\n        this.props.setUser(user)\n        this.props.history.push('/')\n      } else {\n        this.props.history.push('/login');\n        this.props.clearUser();\n      }\n    })\n  }\n\n  render() {\n    return this.props.isLoading ? <Spinner /> : (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/register\" component={Register} />\n      </Switch>\n    )\n  }\n}\n\nconst mapStateFromProps = state => ({\n  isLoading: state.user.isLoading\n})\n\nconst RootWithAuth = withRouter(connect(mapStateFromProps, { setUser, clearUser })(Root));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <RootWithAuth />\n    </Router>\n  </Provider>\n  , document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}